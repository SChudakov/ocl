
package Test

context Personne
 inv : enfants->forAll( e | e.age < self.age - 7)
 inv : enfants->forAll( e : Personne | e.age < self.age - 7)
 inv i3 : enfants->forAll( e1,e2 : Personne | e1 <> e2 implies e1.prenom <> e2.prenom)
 inv i4 : self.enfants -> isUnique ( e | e.prenom )
 def : cousins : Set(Personne) = parents.parents.enfants.enfants->excluding(parents.enfants )->asSet()

context Personne::age : Integer
 init : 0

context Personne::estMarrie : Boolean
 derive : conjoint->notEmpty()

context Personne::salaire() : Integer
 post : return > 5000

context Compagnie::embaucheEmploye( p : Personne)
 pre pasPresent : not (employes->includes(p))
 post embauche : employes->includes(p)

context Personne::grandsParents() : Set(Personne)
 body : parents.parents->asSet()
+
( age < 40 implies salaire > 1000 ) and ( age >=40 implies salaire>2000)
+
(if age<40 then salaire > 1000 else salaire > 2000 endif)
+
salaire > (if age<40 then 1000 else 2000 endif)
+
nom.substring(1,1).toUpper().concat(nom.substring(2,nom.size()).toLower())
+
epouse->notEmpty() implies epouse.sexe = Sexe::Feminin
+
Set { 3, 5, 2, 45, 5 }->size()
+
Sequence { 1, 2, 45, 9, 3, 9 } ->count(9)
+
Sequence { 1, 2, 45, 2, 3, 9 } ->includes(45)
+
Bag { 1, 9, 9, 1 } -> count(9)
+
(c->asSet()->size() = c->size())
+
(c->count(x) = 0)
+
Bag { 1, 9, 0, 1, 2, 9, 1 } -> includesAll( Bag{ 9,1,9} )
+
self.enfants ->select( e | e.age>10 and e.sexe = Sexe::Masculin)
+
self.enfants ->reject(e | e.enfants->isEmpty())->notEmpty()
+
membres->any(e | e.titre='president')
+
self.employe->select( p | p.age>50 )+
self.employe->select( p : Personne | p.age>50)+
self.enfants->forAll( p | p.age<10)+
self.enfants->exists( e| e.sexe=Sexe::Masculin)+
self.enfants->one( e| e.age>=18) + self.enfants->forAll( e| e.age < self.age )+
self.enfants->forAll( e | e.age < self.age - 7)+
self.enfants->forAll( e : Personne | e.age < self.age - 7)+
self.enfants->exists( e1,e2 | e1.age = e2.age )+
self.enfants->forAll( e1,e2 : Personne |e1 <> e2 implies e1.prenom <> e2.prenom)+
self.enfants -> isUnique ( e| e.prenom )+
(self.enfants->collect(e | e.age) = Bag{10,5,10,7})+
self.employes->collect(e | e.salaire/10)->sum()+
self.enfants.enfants.voitures+

(enfants.enfants.prenom = Bag{ 'pierre', 'paul', 'marie', 'paul' })+
(enfants->collectNested(enfants.prenom) = Bag { Bag{'pierre', 'paul'}, Bag{'marie','paul'}})+
Sequence{1..3}->forAll(i | s.at(+i) < s.at(i+-1) )

context Company
inv: self.numberOfEmployees > 50

context Company inv:
self.numberOfEmployees > 50

context Person::income2 : Integer
init:   (parents.income2->sum() * 1/100).round() -- pocket allowance
derive:  if underAge
      then (parents.income2->sum() * 1/100).round()
      else job.salary->sum()
      endif



context Person
def: income : Integer = self.Job.salary->sum()
def: nickname : String = 'Little Red Rooster'
def: hasTitle(t : String) : Boolean = self.Job->exists(tile:String | title = t)


context Person inv:
self.age > 0


context Company inv:
self.stockPrice() > 0


context Company
inv: self.manager.isUnemployed = false
inv: self.employee->notEmpty()


context Person inv:
self.employer->size() < 3


context Person inv:
self.employer->isEmpty()


context Company inv:
self.manager->size() = 1


context Company inv:
self.manager.age > 40


context Person inv:
self.wife->notEmpty() implies self.wife.gender = Gender::female


context Person inv:
self.wife->notEmpty() implies self.wife.age >= 18 and
self.husband->notEmpty() implies self.husband.age >= 18


context Company inv:
self.employee->size() <= 50


context Person inv:
self.Job->size() <= 2


context Job
inv: self.employer.numberOfEmployees >= 1
inv: self.employee.age > 21


context Bank inv:
not self.customer->exists(e | e.underAge = true)


context Person inv:
self.allInstances()->forAll(p1:Person, p2:Person |
                                 p1 <> p2 implies
                                 p1.lastName <> p2.lastName)


context Company inv:
self.employee->select(e:Person | e.age > 50)->notEmpty()


context Company inv:
self.employee->select(e:Person | e.age > 50)->notEmpty()
context Company inv:
self.employee->select(p: Person | p.age > 50)->notEmpty()


context Company inv:
self.employee->select(p : Person | p.age > 50)->notEmpty()


context Company inv:
self.employee->reject( p:Person | p.isMarried )->isEmpty()




inv: self.employee->collect(p:Person | p.birthDate)->size() > 0
inv: self.employee.birthDate->size() > 0


context Company
inv:     self.employee->forAll(p:Person | p.age <= 65 )
inv:     self.employee->forAll( p:Person | p.age <= 65 )
inv:     self.employee->forAll( p : Person | p.age <= 65 )


context Company inv:
self.employee->forAll( e1 :Person , e2 : Person |
                 e1 <> e2 implies e1.firstName <> e2.firstName)


context Company inv:
self.employee->forAll (e1 :Person | self.employee->forAll (e2:Person |
                   e1 <> e2 implies e1.firstName <> e2.firstName))


context Company inv:
self.employee->exists( p:Person | p.firstName = 'Jack' )


context Company inv:
self.employee->exists( p :Person | p.firstName = 'Jack' )
context Company inv:
self.employee->exists( p : Person | p.firstName = 'Jack' )


context Person inv:
employer->forAll( e:Company | e.employee->exists( p:Person|p.lastName = e.name) )
context Person
inv: employer->forAll( c:Company | c.employee->exists( p : Person | p.lastName = c.name) )

endpackage