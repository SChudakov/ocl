import java_cup.runtime.*;
import com.ocl.scanner.CalculatorScanner;

/* -----------------Parser Code Section----------------- */

parser code {:
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal COMA, SEMICOLON, COLON, LPAREN, RPAREN, LCURLY_BRACE, RCURLY_BRACE, LSQUARE_BRACKET, RSQUARE_BRACKET;
terminal UNDERSCORE;
terminal PLUS, MINUS, STAR, DIVISION;
terminal GR, GREQ, LE, LEQ, EQ, NEQ;
terminal AND, OR, NOT, XOR;
terminal OR_SYMBOL;
terminal DOUBLEDOT, AT;
terminal DOT, ARROW, DOUBLECOLON;
terminal IMPLIES;
terminal CONTEXT, INV,PRE,POST;
terminal BODY;
terminal DEF, LET;
terminal IF, THEN,ELSE,ENDIF;
terminal PACKAGE, ENDPACKAGE;
terminal IN;
terminal TUPLE,SET,BAG,SEQUENCE,COLLECTION,ORDERED_SET;
terminal INIT, DERIVE;
terminal STATIC;
terminal OCL_ANY,OCL_INVALID,OCL_MESSAGE,OCL_VOID;
terminal BOOLEAN,INTEGER,REAL,STRING,UNLIMITED_NATURAL;
terminal SELF;
terminal NULL, INVALID;
terminal CUP, DOUBLE_CUP;
terminal QUESTION_SIGN;
terminal ITERATE;
terminal DIV;
terminal MOD;
terminal TRUE, FALSE;
terminal IDENTIFIER;
terminal FORALL, EXISTS, SELECT, REJECT, COLLECT, ISUNIQUE, ANY, ONE, SORTEDBY;

terminal Integer    INTEGER_LITERAL;
terminal Double     REAL_LITERAL;
terminal String     STRING_LITERAL;
terminal Boolean    BOOLEAN_LITERAL;


// declarations
non terminal packageDeclarationCS, contextDeclarationCS_list, contextDeclarationCS;
// decl
non terminal propertyContextDeclCS, classifierContextDeclCS, operationContextDeclCS, prePostOrBodyDeclCS, prePostOrBodyDeclCSList;
// or
non terminal initOrDerValueCS, invOrDefCS, invOrDefCSList;
non terminal IterationTypeCS;
// expression
non terminal defExpressionCS, OclExpressionCS, ExpressionInOclCS;
non terminal PrimaryOclExpressionCS, UnaryOclExpression, MultiplyOclExpressionCS, AddOclExpressionCS;
non terminal LeafLogicalOclExpressionCS, AndLogicalOclExpressionCS, OrLogicalOclExpressionCS, XorLogicalOclExpressionCS, ImpliesLogicalOclExpressionCS;
// type
non terminal typeCS, tupleTypeCS, oclTypeCS, primitiveTypeCS, collectionTypeCS, CollectionTypeIdentifierCS;
// literals groups
non terminal LiteralExpCS, EnumLiteralExpCS, CollectionLiteralExpCS, CollectionLiteralPartsCS, CollectionLiteralPartCS, TupleLiteralExpCS, PrimitiveLiteralExpCS;
// primitives literals
non terminal BooleanLiteralExpCS, UnlimitedNaturalLiteralExpCS, NullLiteralExpCS,InvalidLiteralExpCS, TypeLiteralExpCS, IntegerLiteralExpCS, RealLiteralExpCS, StringLiteralExpCS;
// call exp CS
non terminal CallExpCS, FeatureCallExpCS, OperationCallExpCS, PropertyCallExpCS, NavigationCallExpCS, AssociationClassCallExpCS;
// flow controll operators
non terminal LetExpCS,  OclMessageExpCS, IfExpCS, LoopExpCS, IteratorExpCS, IterateExpCS, LetExpSubCS;
// variable
non terminal VariableDeclarationCS, variableDeclarationListCS, VariableExpCS;
// name
non terminal pathNameCS, simpleNameCS;
// othres
non terminal operationCS;
non terminal parametersCS;
non terminal OclMessageArgumentsCS;
non terminal OclMessageArgCS;
non terminal restrictedKeywordCS;
non terminal CollectionRangeCS;
non terminal argumentsCS;
non terminal isMarkedPreCS;

start with packageDeclarationCS;
//start with PrimaryOclExpressionCS;


// Level 0
packageDeclarationCS         ::= PACKAGE pathNameCS contextDeclarationCS_list ENDPACKAGE
                                 |
                                 PACKAGE pathNameCS ENDPACKAGE
                                 |
                                 contextDeclarationCS_list;


// Level 1
contextDeclarationCS_list    ::= contextDeclarationCS contextDeclarationCS_list
                                 |
                                 contextDeclarationCS
                                 ;


pathNameCS                   ::= simpleNameCS
                                 |
                                 pathNameCS DOUBLECOLON restrictedKeywordCS
                                 |
                                 pathNameCS DOUBLECOLON simpleNameCS
                                 ;


// Level 2
contextDeclarationCS         ::= propertyContextDeclCS
                                 |
                                 classifierContextDeclCS
                                 |
                                 operationContextDeclCS;


simpleNameCS                 ::= IDENTIFIER
                                 |
                                 UNDERSCORE STRING_LITERAL
                                 |
                                 simpleNameCS STRING_LITERAL;


// Level 3
// cahnged: simpleName to simpleNameCS
propertyContextDeclCS        ::= CONTEXT pathNameCS DOUBLECOLON simpleNameCS COLON typeCS initOrDerValueCS;

//changed: added
invOrDefCSList               ::= invOrDefCS
                                 |
                                 invOrDefCSList invOrDefCS;

classifierContextDeclCS      ::= CONTEXT pathNameCS invOrDefCSList
                                 |
                                 CONTEXT simpleNameCS COLON pathNameCS invOrDefCSList;


operationContextDeclCS       ::= CONTEXT operationCS prePostOrBodyDeclCSList;


restrictedKeywordCS          ::= CollectionTypeIdentifierCS
                                 |
                                 primitiveTypeCS
                                 |
                                 oclTypeCS
                                 |
                                 IterationTypeCS
                                 |
                                 TUPLE;


// Level 4
initOrDerValueCS             ::= INIT COLON OclExpressionCS
                                 |
                                 INIT COLON OclExpressionCS initOrDerValueCS
                                 |
                                 DERIVE COLON OclExpressionCS
                                 |
                                 DERIVE COLON OclExpressionCS initOrDerValueCS;


typeCS                       ::= pathNameCS
                                 |
                                 collectionTypeCS
                                 |
                                 tupleTypeCS
                                 |
                                 primitiveTypeCS
                                 |
                                 oclTypeCS;

// cahnged: invOrDefCSList added
invOrDefCS                   ::= INV COLON OclExpressionCS
                                 |
                                 INV simpleNameCS COLON OclExpressionCS
                                 |
                                 DEF COLON defExpressionCS
                                 |
                                 DEF simpleNameCS COLON defExpressionCS
                                 |
                                 STATIC DEF COLON defExpressionCS
                                 |
                                 STATIC DEF simpleNameCS COLON defExpressionCS
                                 ;


operationCS                  ::= pathNameCS DOUBLECOLON simpleNameCS LPAREN RPAREN
                                 |
                                 pathNameCS DOUBLECOLON simpleNameCS LPAREN RPAREN COLON typeCS
                                 |
                                 pathNameCS DOUBLECOLON simpleNameCS LPAREN parametersCS RPAREN
                                 |
                                 pathNameCS DOUBLECOLON simpleNameCS LPAREN parametersCS RPAREN COLON typeCS
                                 |
                                 simpleNameCS LPAREN RPAREN
                                 |
                                 simpleNameCS LPAREN RPAREN COLON typeCS
                                 |
                                 simpleNameCS LPAREN parametersCS RPAREN
                                 |
                                 simpleNameCS LPAREN parametersCS RPAREN COLON typeCS;

prePostOrBodyDeclCSList      ::= prePostOrBodyDeclCS prePostOrBodyDeclCSList
                                 |
                                 prePostOrBodyDeclCS
                                 ;

prePostOrBodyDeclCS          ::= PRE COLON OclExpressionCS
                                 |
                                 PRE simpleNameCS COLON OclExpressionCS
                                 |
                                 POST COLON OclExpressionCS
                                 |
                                 POST simpleNameCS COLON OclExpressionCS
                                 |
                                 BODY COLON OclExpressionCS
                                 |
                                 BODY simpleNameCS COLON OclExpressionCS
                                 ;


oclTypeCS                    ::= OCL_ANY
                                 |
                                 OCL_INVALID
                                 |
                                 OCL_MESSAGE
                                 |
                                 OCL_VOID;


CollectionTypeIdentifierCS   ::= SET
                                 |
                                 BAG
                                 |
                                 SEQUENCE
                                 |
                                 COLLECTION
                                 |
                                 ORDERED_SET;


primitiveTypeCS              ::= BOOLEAN
                                 |
                                 INTEGER
                                 |
                                 REAL
                                 |
                                 STRING
                                 |
                                 UNLIMITED_NATURAL;


// Level 5
tupleTypeCS                  ::= TUPLE LPAREN RPAREN
                                 |
                                 TUPLE LPAREN variableDeclarationListCS RPAREN;


collectionTypeCS             ::= CollectionTypeIdentifierCS LPAREN typeCS RPAREN;


// changed: added
PrimaryOclExpressionCS       ::= VariableExpCS
                                 |
                                 LiteralExpCS
                                 |
                                 CallExpCS
                                 |
                                 LPAREN OclExpressionCS RPAREN
                                 ;

UnaryOclExpression          ::=  PrimaryOclExpressionCS
                                 |
                                 NOT UnaryOclExpression
                                 |
                                 MINUS PrimaryOclExpressionCS
                                 |
                                 PLUS PrimaryOclExpressionCS
                                 ;

// changed: added
MultiplyOclExpressionCS     ::=  UnaryOclExpression
                                 |
                                 MultiplyOclExpressionCS STAR UnaryOclExpression
                                 |
                                 MultiplyOclExpressionCS DIVISION UnaryOclExpression
                                 |
                                 MultiplyOclExpressionCS DIV UnaryOclExpression
                                 |
                                 MultiplyOclExpressionCS MOD UnaryOclExpression
                                 ;

// changed: added
AddOclExpressionCS           ::= MultiplyOclExpressionCS
                                 |
                                 AddOclExpressionCS PLUS MultiplyOclExpressionCS
                                 |
                                 AddOclExpressionCS MINUS MultiplyOclExpressionCS
                                 ;

LeafLogicalOclExpressionCS  ::=  AddOclExpressionCS LE AddOclExpressionCS
                                 |
                                 AddOclExpressionCS GR AddOclExpressionCS
                                 |
                                 AddOclExpressionCS LEQ AddOclExpressionCS
                                 |
                                 AddOclExpressionCS GREQ AddOclExpressionCS
                                 |
                                 AddOclExpressionCS NEQ AddOclExpressionCS
                                 |
                                 AddOclExpressionCS EQ AddOclExpressionCS
                                 |
                                 AddOclExpressionCS
                                 ;

ImpliesLogicalOclExpressionCS::= LeafLogicalOclExpressionCS IMPLIES ImpliesLogicalOclExpressionCS
                                 |
                                 LeafLogicalOclExpressionCS
                                 ;

AndLogicalOclExpressionCS    ::= ImpliesLogicalOclExpressionCS AND AndLogicalOclExpressionCS
                                 |
                                 ImpliesLogicalOclExpressionCS
                                 ;

OrLogicalOclExpressionCS     ::= AndLogicalOclExpressionCS OR OrLogicalOclExpressionCS
                                 |
                                 AndLogicalOclExpressionCS
                                 ;

XorLogicalOclExpressionCS    ::= OrLogicalOclExpressionCS XOR XorLogicalOclExpressionCS
                                 |
                                 OrLogicalOclExpressionCS
                                 ;

// changed: a lot
OclExpressionCS              ::= XorLogicalOclExpressionCS
                                 |
                                 LetExpCS
                                 |
                                 OclMessageExpCS
                                 |
                                 IfExpCS;

// changed: conflict with VariableDeclarationCS
defExpressionCS              ::= simpleNameCS EQ OclExpressionCS
                                 |
                                 simpleNameCS COLON typeCS EQ OclExpressionCS
                                 |
                                 operationCS EQ OclExpressionCS
                                 ;


parametersCS                 ::= VariableDeclarationCS
                                 |
                                 VariableDeclarationCS COMA parametersCS;


// Level 6
variableDeclarationListCS    ::= VariableDeclarationCS
                                 |
                                 VariableDeclarationCS COMA variableDeclarationListCS;


// cahnged: added PrimaryOclExpressionCS
OclMessageExpCS              ::= PrimaryOclExpressionCS DOUBLE_CUP simpleNameCS LPAREN RPAREN
                                 |
                                 PrimaryOclExpressionCS DOUBLE_CUP simpleNameCS LPAREN OclMessageArgumentsCS RPAREN
                                 |
                                 PrimaryOclExpressionCS CUP simpleNameCS LPAREN RPAREN
                                 |
                                 PrimaryOclExpressionCS CUP simpleNameCS LPAREN OclMessageArgumentsCS RPAREN;


IfExpCS                      ::= IF OclExpressionCS THEN OclExpressionCS ELSE OclExpressionCS ENDIF;

// changed: simplified
LetExpCS                     ::= LET variableDeclarationListCS IN OclExpressionCS;


VariableExpCS                ::= simpleNameCS
                                 |
                                 SELF
                                 ;


CallExpCS                    ::= FeatureCallExpCS
                                 |
                                 LoopExpCS
                                 ;


LiteralExpCS                 ::= EnumLiteralExpCS
                                 |
                                 CollectionLiteralExpCS
                                 |
                                 TupleLiteralExpCS
                                 |
                                 PrimitiveLiteralExpCS
                                 //| cahnged: no such rule in ocl.js
                                 //TypeLiteralExpCS
                                 ;


VariableDeclarationCS        ::= simpleNameCS
                                 |
                                 simpleNameCS EQ OclExpressionCS
                                 |
                                 simpleNameCS COLON typeCS // changed: added rule
                                 |
                                 simpleNameCS COLON typeCS EQ OclExpressionCS
                                 ;


// Level 7
OclMessageArgumentsCS        ::= OclMessageArgCS
                                 |
                                 OclMessageArgCS COMA OclMessageArgumentsCS;

// changed: IteratorExpCS strange rule
LoopExpCS                    ::= IteratorExpCS
                                 |
                                 IterateExpCS;


FeatureCallExpCS             ::= OperationCallExpCS
                                 |
                                 PropertyCallExpCS
                                 |
                                 AssociationClassCallExpCS // changed: moved from NavigationCallExpCS
                                 ;


EnumLiteralExpCS             ::= pathNameCS DOUBLECOLON simpleNameCS;


CollectionLiteralExpCS       ::= CollectionTypeIdentifierCS LCURLY_BRACE RCURLY_BRACE
                                 |
                                 CollectionTypeIdentifierCS LCURLY_BRACE CollectionLiteralPartsCS RCURLY_BRACE;


PrimitiveLiteralExpCS        ::= IntegerLiteralExpCS
                                 |
                                 RealLiteralExpCS
                                 |
                                 StringLiteralExpCS
                                 |
                                 BooleanLiteralExpCS
                                 |
                                 STAR // cahnged: replace of UnlimitedNaturalLiteralExpCS
                                 |
                                 NullLiteralExpCS
                                 |
                                 InvalidLiteralExpCS;


TupleLiteralExpCS            ::= TUPLE LCURLY_BRACE variableDeclarationListCS RCURLY_BRACE;


TypeLiteralExpCS             ::= typeCS;


// Level 8
OclMessageArgCS              ::= QUESTION_SIGN
                                 |
                                 QUESTION_SIGN COLON typeCS
                                 |
                                 OclExpressionCS;


IterationTypeCS              ::= FORALL | EXISTS | SELECT | REJECT | COLLECT | ISUNIQUE | ANY | ONE | SORTEDBY;

// changed: very strange rule
IteratorExpCS                ::= PrimaryOclExpressionCS ARROW simpleNameCS
                                 LPAREN
                                 RPAREN
                                 |
                                 PrimaryOclExpressionCS ARROW simpleNameCS
                                 LPAREN
                                 argumentsCS
                                 RPAREN
                                 |
                                 PrimaryOclExpressionCS ARROW IterationTypeCS
                                 LPAREN
                                 VariableDeclarationCS OR_SYMBOL OclExpressionCS
                                 RPAREN
                                 |
                                 PrimaryOclExpressionCS ARROW IterationTypeCS
                                 LPAREN
                                 VariableDeclarationCS COMA VariableDeclarationCS OR_SYMBOL OclExpressionCS
                                 RPAREN
                                 //|
                                 //OclExpressionCS DOT LPAREN simpleNameCS LPAREN RPAREN
                                 //|
                                 //OclExpressionCS DOT LPAREN simpleNameCS LPAREN argumentsCS RPAREN
                                 //|
                                 //OclExpressionCS DOT simpleNameCS
                                 //|
                                 //OclExpressionCS DOT simpleNameCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET
                                 ;

// changed: added PrimaryOclExpressionCS
IterateExpCS                 ::= PrimaryOclExpressionCS ARROW ITERATE
                                 LPAREN
                                 VariableDeclarationCS OR_SYMBOL OclExpressionCS
                                 RPAREN
                                 |
                                 PrimaryOclExpressionCS ARROW ITERATE
                                 LPAREN
                                 VariableDeclarationCS SEMICOLON VariableDeclarationCS OR_SYMBOL OclExpressionCS
                                 RPAREN;



OperationCallExpCS           ::= //PrimaryOclExpressionCS simpleNameCS PrimaryOclExpressionCS // changed: strange rule
                                 //| // changed: covered by iterators
                                 // PrimaryOclExpressionCS ARROW simpleNameCS LPAREN RPAREN
                                 //| // changed: covered by iterators
                                 //PrimaryOclExpressionCS ARROW simpleNameCS LPAREN argumentsCS RPAREN
                                 //|
                                 PrimaryOclExpressionCS DOT simpleNameCS LPAREN RPAREN
                                 |
                                 PrimaryOclExpressionCS DOT simpleNameCS LPAREN argumentsCS RPAREN
                                 //|
                                 //simpleNameCS LPAREN RPAREN // changed: covered by pathNameCS LPAREN RPAREN
                                 //|
                                 //simpleNameCS LPAREN argumentsCS RPAREN // changed: same as above
                                 |
                                 PrimaryOclExpressionCS DOT simpleNameCS isMarkedPreCS LPAREN RPAREN
                                 |
                                 PrimaryOclExpressionCS DOT simpleNameCS isMarkedPreCS LPAREN argumentsCS RPAREN
                                 |
                                 simpleNameCS isMarkedPreCS LPAREN RPAREN
                                 |
                                 simpleNameCS isMarkedPreCS LPAREN argumentsCS RPAREN
                                 |
                                 pathNameCS LPAREN RPAREN
                                 |
                                 pathNameCS LPAREN argumentsCS RPAREN
                                 //|
                                 //simpleNameCS OclExpressionCS // changed: strange rule
                                 |
                                 PrimaryOclExpressionCS DOT pathNameCS DOUBLECOLON simpleNameCS LPAREN RPAREN
                                 |
                                 PrimaryOclExpressionCS DOT pathNameCS DOUBLECOLON simpleNameCS LPAREN argumentsCS RPAREN
                                 |
                                 PrimaryOclExpressionCS DOT pathNameCS DOUBLECOLON simpleNameCS isMarkedPreCS LPAREN RPAREN
                                 |
                                 PrimaryOclExpressionCS DOT pathNameCS DOUBLECOLON simpleNameCS isMarkedPreCS LPAREN argumentsCS RPAREN
                                 ;

// changed: removed, now part of FeatureCallExpCS
//NavigationCallExpCS          ::= PropertyCallExpCS
//                                 |
//                                 AssociationClassCallExpCS;

// changed: added PrimaryOclExpressionCS
PropertyCallExpCS            ::= PrimaryOclExpressionCS DOT simpleNameCS
                                 |
                                 PrimaryOclExpressionCS DOT simpleNameCS isMarkedPreCS
                                 |
                                 PrimaryOclExpressionCS DOT pathNameCS DOUBLECOLON simpleNameCS
                                 |
                                 PrimaryOclExpressionCS DOT pathNameCS DOUBLECOLON simpleNameCS isMarkedPreCS
                                 ;


CollectionLiteralPartsCS     ::= CollectionLiteralPartCS
                                 |
                                 CollectionLiteralPartCS COMA CollectionLiteralPartsCS;


InvalidLiteralExpCS          ::= INVALID;


BooleanLiteralExpCS          ::= TRUE | FALSE;


RealLiteralExpCS             ::= REAL_LITERAL;


NullLiteralExpCS             ::= NULL;


IntegerLiteralExpCS          ::= INTEGER_LITERAL;


UnlimitedNaturalLiteralExpCS ::= IntegerLiteralExpCS
                                 |
                                 STAR;


StringLiteralExpCS           ::= STRING_LITERAL
                                 |
                                 StringLiteralExpCS STRING_LITERAL;


// Level 9
argumentsCS                  ::= OclExpressionCS
                                 |
                                 OclExpressionCS COMA argumentsCS;


isMarkedPreCS                ::= AT PRE;

// changed: conflicts with PropertyCallExpCS
AssociationClassCallExpCS    ::= PrimaryOclExpressionCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET
                                 |
                                 PrimaryOclExpressionCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET isMarkedPreCS
                                 //OclExpressionCS DOT simpleNameCS
                                 //|
                                 //OclExpressionCS DOT simpleNameCS isMarkedPreCS
                                 //|
                                 //OclExpressionCS DOT simpleNameCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET
                                 //|
                                 //OclExpressionCS DOT simpleNameCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET isMarkedPreCS
                                 //|
                                 //simpleNameCS
                                 //|
                                 //simpleNameCS isMarkedPreCS
                                 //|
                                 //simpleNameCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET
                                 //|
                                 //simpleNameCS LSQUARE_BRACKET argumentsCS RSQUARE_BRACKET isMarkedPreCS
                                 ;


CollectionLiteralPartCS      ::= CollectionRangeCS
                                 |
                                 OclExpressionCS;


// Level 10
CollectionRangeCS            ::= OclExpressionCS DOUBLEDOT OclExpressionCS;

ExpressionInOclCS            ::= OclExpressionCS;