( age < 40 implies salaire > 1000 ) and ( age >=40 implies salaire>2000)
if age<40 then salaire > 1000 else salaire > 2000 endif
salaire > (if age<40 then 1000 else 2000 endif)
nom= nom.substring(1,1).toUpper().concat(
nom.substring(2,nom.size()).toLower())
epouse->notEmpty() implies epouse.sexe = Sexe::Feminin
Set { 3, 5, 2, 45, 5 }->size()
Sequence { 1, 2, 45, 9, 3, 9 } ->count(9)
Sequence { 1, 2, 45, 2, 3, 9 } ->includes(45)
Bag { 1, 9, 9, 1 } -> count(9)
c->asSet()->size() = c->size()
c->count(x) = 0
Bag { 1, 9, 0, 1, 2, 9, 1 } -> includesAll( Bag{ 9,1,9} )
self.enfants ->select( age>10 and sexe = Sexe::Masculin)
self.enfants ->reject(enfants->isEmpty())->notEmpty()
membres->any(titre='president')
self.employe->select(age > 50)
self.employe->select( p | p.age>50 )
self.employe->select( p : Personne | p.age>50)
self.enfants->forall(age<10)
self.enfants->exists(sexe=Sexe::Masculin)
self.enfants->one(age>=18)self.enfants->forall( age < self.age )
self.enfants->forall( e | e.age < self.age - 7)
self.enfants->forall( e : Personne | e.age < self.age - 7)
self.enfants->exists( e1,e2 | e1.age = e2.age )
self.enfants->forall( e1,e2 : Personne |
 e1 <> e2 implies e1.prenom <> e2.prenom)
self.enfants -> isUnique ( prenom )
self.enfants->collect(age) = Bag{10,5,10,7}
self.employes->collect(salaire/10)->sum()
self.enfants.enfants.voitures
enfants.enfants.prenom = Bag{ 'pierre', 'paul', 'marie', 'paul' }
enfants->collectNested(enfants.prenom) = Bag { Bag{'pierre', 'paul'}, Bag{'marie','paul'}
Sequence{1..s->size()-1} -> forall(i | s.at(i) < s.at(i+1) )
enfants->sortedBy( age )
enfants->sortedBy( enfants->size() )->last()
let ages = enfants.age->sortedBy(a | a) in ages.last() - ages.first()
s.Emploi
p.Emploi
s.Emploi->collect(salaire)->sum()
s.Emploi.salaire->forall(x | x>500)
p.Evaluation[chefs]
p.Evaluation[employes]
p.Evaluation[chefs].note -> sum()s.Emploi-> select(salaire<1000).employe
p.enfants->select(oclIsKindOf(Femme)).asTypeOf(Set(Femme)) ->select(nomDeJF <> nom)
Personne.allInstances->size() < 500
Personne.allInstances->forall(p1,p2 | p1<>p2 implies p1.numsecu <> p2.numsecu)
Personne.allInstances->isUnique(numsecu)